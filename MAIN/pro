import React, { useState, useEffect, useRef } from 'react';

// --- Helper Components & Icons ---

const BotIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-6 w-6">
        <path d="M12 8V4H8" />
        <rect width="16" height="12" x="4" y="8" rx="2" />
        <path d="M2 14h2" />
        <path d="M20 14h2" />
        <path d="M15 13v2" />
        <path d="M9 13v2" />
    </svg>
);

const UserIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-6 w-6">
        <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
        <circle cx="12" cy="7" r="4" />
    </svg>
);

const SendIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5">
        <path d="m22 2-7 20-4-9-9-4Z" />
        <path d="m22 2-11 11" />
    </svg>
);

const LoadingSpinner = () => (
    <div className="flex justify-center items-center">
        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
    </div>
);


// --- Main Application Components ---

/**
 * Onboarding Questionnaire Component
 * Gathers user's financial details and risk tolerance.
 */
const Onboarding = ({ onComplete }) => {
    const [step, setStep] = useState(1);
    const [formData, setFormData] = useState({
        age: '',
        income: '',
        savings: '',
        goal: 'retirement',
        riskTolerance: 3, // Default to moderate
        investmentTimeline: 5, // Default to 5-10 years
    });

    const questions = [
        { id: 'age', label: 'What is your age?', type: 'number', placeholder: 'e.g., 30' },
        { id: 'income', label: 'What is your approximate annual income?', type: 'number', placeholder: 'e.g., 75000' },
        { id: 'savings', label: 'How much have you saved for investing?', type: 'number', placeholder: 'e.g., 20000' },
        { id: 'goal', label: 'What is your primary financial goal?', type: 'select', options: ['Retirement', 'Buy a Home', 'Education', 'Wealth Growth'] },
        {
            id: 'riskTolerance',
            label: 'A global event causes your portfolio to drop 20% in a month. How do you react?',
            type: 'radio',
            options: [
                { value: 1, text: 'Sell everything to cut my losses.' },
                { value: 3, text: 'Hold and wait for it to recover.' },
                { value: 5, text: 'Buy more, it\'s a great opportunity.' },
            ],
        },
        {
            id: 'investmentTimeline',
            label: 'When will you need to access a significant portion of this money?',
            type: 'radio',
            options: [
                { value: 1, text: 'In less than 2 years.' },
                { value: 3, text: 'In 2 to 5 years.' },
                { value: 5, text: 'In 5 to 10 years.' },
                { value: 10, text: 'More than 10 years away.' },
            ]
        }
    ];

    const totalSteps = questions.length;

    const handleNext = (e) => {
        e.preventDefault();
        if (step < totalSteps) {
            setStep(step + 1);
        } else {
            onComplete(formData);
        }
    };

    const handleBack = () => {
        if (step > 1) {
            setStep(step - 1);
        }
    };

    const handleChange = (e) => {
        const { name, value, type } = e.target;
        setFormData(prev => ({ ...prev, [name]: type === 'number' || type === 'radio' ? Number(value) : value }));
    };

    const currentQuestion = questions[step - 1];

    return (
        <div className="max-w-2xl mx-auto my-12 p-8 bg-white rounded-2xl shadow-2xl transition-all duration-500">
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Let's Build Your Financial Profile</h2>
            <p className="text-gray-500 mb-6">This will help us personalize your investment strategy.</p>
            
            {/* Progress Bar */}
            <div className="w-full bg-gray-200 rounded-full h-2.5 mb-8">
                <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${(step / totalSteps) * 100}%` }}></div>
            </div>

            <form onSubmit={handleNext}>
                <div className="mb-6 min-h-[150px]">
                    <label htmlFor={currentQuestion.id} className="block text-lg font-semibold text-gray-700 mb-3">{currentQuestion.label}</label>
                    {currentQuestion.type === 'number' && (
                        <input
                            type="number"
                            id={currentQuestion.id}
                            name={currentQuestion.id}
                            value={formData[currentQuestion.id]}
                            onChange={handleChange}
                            placeholder={currentQuestion.placeholder}
                            required
                            className="w-full px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                        />
                    )}
                    {currentQuestion.type === 'select' && (
                        <select
                            id={currentQuestion.id}
                            name={currentQuestion.id}
                            value={formData[currentQuestion.id]}
                            onChange={handleChange}
                            required
                            className="w-full px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                        >
                            {currentQuestion.options.map(opt => <option key={opt} value={opt.toLowerCase()}>{opt}</option>)}
                        </select>
                    )}
                    {currentQuestion.type === 'radio' && (
                        <div className="space-y-3">
                            {currentQuestion.options.map(opt => (
                                <label key={opt.value} className="flex items-center p-4 bg-gray-50 border border-gray-200 rounded-lg cursor-pointer hover:bg-blue-50 hover:border-blue-400 has-[:checked]:bg-blue-50 has-[:checked]:border-blue-500 transition-all">
                                    <input
                                        type="radio"
                                        name={currentQuestion.id}
                                        value={opt.value}
                                        checked={formData[currentQuestion.id] === opt.value}
                                        onChange={handleChange}
                                        required
                                        className="h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                                    />
                                    <span className="ml-3 text-gray-700">{opt.text}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
                
                <div className="flex justify-between mt-8">
                    <button type="button" onClick={handleBack} disabled={step === 1} className="px-6 py-2 text-gray-600 bg-gray-200 rounded-lg hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed transition-all">
                        Back
                    </button>
                    <button type="submit" className="px-6 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-all shadow-md">
                        {step === totalSteps ? 'Generate My Plan' : 'Next'}
                    </button>
                </div>
            </form>
        </div>
    );
};


/**
 * Dashboard Component
 * Displays the personalized financial advice and portfolio.
 */
const Dashboard = ({ profile, onReset }) => {
    const [portfolio, setPortfolio] = useState(null);
    const [riskProfile, setRiskProfile] = useState('');
    const [isTrainingMode, setIsTrainingMode] = useState(false);
    const [editedPortfolio, setEditedPortfolio] = useState(null);

    useEffect(() => {
        // Simple algorithm to generate a portfolio based on risk
        const calculatePortfolio = () => {
            const { riskTolerance, investmentTimeline } = profile;
            const score = riskTolerance + investmentTimeline;
            
            let portfolioConfig;
            if (score <= 5) {
                setRiskProfile('Conservative');
                portfolioConfig = { stocks: 20, bonds: 60, cash: 20, description: "Focuses on preserving capital with lower risk." };
            } else if (score <= 10) {
                setRiskProfile('Moderate');
                portfolioConfig = { stocks: 50, bonds: 40, cash: 10, description: "A balanced approach for steady growth." };
            } else {
                setRiskProfile('Aggressive');
                portfolioConfig = { stocks: 80, bonds: 15, cash: 5, description: "Aims for maximum growth, accepting higher risk." };
            }
            setPortfolio(portfolioConfig);
            setEditedPortfolio(portfolioConfig); // Initialize the editable portfolio
        };
        calculatePortfolio();
    }, [profile]);

    // Handler for slider changes
    const handlePortfolioChange = (asset, value) => {
        const numValue = Number(value);
        setEditedPortfolio(prev => {
            const newPortfolio = { ...prev, [asset]: numValue };
            let otherAsset, otherValue;

            if (asset === 'stocks') {
                otherAsset = 'bonds';
                otherValue = prev.bonds;
            } else { // asset === 'bonds'
                otherAsset = 'stocks';
                otherValue = prev.stocks;
            }

            if (numValue + otherValue > 100) {
                newPortfolio[otherAsset] = 100 - numValue;
            }
            
            newPortfolio.cash = 100 - newPortfolio.stocks - newPortfolio.bonds;

            return newPortfolio;
        });
    };
    
    // Save the user's changes
    const handleSaveChanges = () => {
        setPortfolio(editedPortfolio);
        // Recalculate risk profile based on new allocation
        const newStockAllocation = editedPortfolio.stocks;
        if (newStockAllocation <= 35) {
            setRiskProfile('Conservative');
        } else if (newStockAllocation <= 65) {
            setRiskProfile('Moderate');
        } else {
            setRiskProfile('Aggressive');
        }
        setIsTrainingMode(false);
    };

    // Cancel editing
    const handleCancel = () => {
        setEditedPortfolio(portfolio); // Revert changes
        setIsTrainingMode(false);
    };


    if (!portfolio || !editedPortfolio) return <div className="text-center p-10"><LoadingSpinner /></div>;
    
    const PortfolioBar = ({ name, percentage, color }) => (
        <div className="mb-4">
            <div className="flex justify-between mb-1">
                <span className="text-base font-medium text-gray-700">{name}</span>
                <span className="text-sm font-medium text-gray-500">{percentage}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-4">
                <div className={`${color} h-4 rounded-full`} style={{ width: `${percentage}%` }}></div>
            </div>
        </div>
    );

    return (
        <div className="max-w-5xl mx-auto my-12 p-6">
            <div className="flex justify-between items-center mb-8">
                <h1 className="text-3xl font-bold text-gray-800">Your Financial Dashboard</h1>
                <button onClick={onReset} className="text-sm text-blue-600 hover:underline">Start Over</button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                {/* Left Column: Portfolio Allocation */}
                <div className="md:col-span-2 bg-white p-8 rounded-2xl shadow-lg">
                    <div className="flex justify-between items-center mb-1">
                        <h2 className="text-xl font-bold text-gray-800">
                           {isTrainingMode ? 'Train Your Model' : 'Recommended Portfolio Allocation'}
                        </h2>
                        {!isTrainingMode && (
                            <button onClick={() => setIsTrainingMode(true)} className="text-sm font-medium text-blue-600 hover:text-blue-800 transition">
                                Adjust Plan
                            </button>
                        )}
                    </div>
                    <p className="text-gray-500 mb-6">Based on your <span className="font-semibold text-blue-600">{riskProfile}</span> profile.</p>
                    
                    {!isTrainingMode ? (
                        <div>
                            <PortfolioBar name="Stocks (ETFs)" percentage={portfolio.stocks} color="bg-green-500" />
                            <PortfolioBar name="Bonds" percentage={portfolio.bonds} color="bg-blue-500" />
                            <PortfolioBar name="Cash / High-Yield Savings" percentage={portfolio.cash} color="bg-yellow-400" />
                        </div>
                    ) : (
                        // Training Mode UI
                        <div className="bg-blue-50 p-6 rounded-lg border border-blue-200 transition-all duration-300">
                             <div className="mb-4">
                                <label className="flex justify-between font-semibold text-gray-700 mb-2">
                                    <span>Stocks</span>
                                    <span>{editedPortfolio.stocks}%</span>
                                </label>
                                <input 
                                    type="range" 
                                    min="0" 
                                    max="100" 
                                    value={editedPortfolio.stocks} 
                                    onChange={(e) => handlePortfolioChange('stocks', e.target.value)}
                                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-green-500"
                                />
                            </div>
                            <div className="mb-4">
                                <label className="flex justify-between font-semibold text-gray-700 mb-2">
                                    <span>Bonds</span>
                                    <span>{editedPortfolio.bonds}%</span>
                                </label>
                                <input 
                                    type="range" 
                                    min="0" 
                                    max="100" 
                                    value={editedPortfolio.bonds} 
                                    onChange={(e) => handlePortfolioChange('bonds', e.target.value)}
                                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-500"
                                />
                            </div>
                             <div className="mb-6">
                                <div className="flex justify-between font-semibold text-gray-700 mb-2">
                                    <span>Cash</span>
                                    <span>{editedPortfolio.cash}%</span>
                                </div>
                                <div className="w-full bg-gray-200 rounded-full h-4">
                                    <div className="bg-yellow-400 h-4 rounded-full" style={{ width: `${editedPortfolio.cash}%` }}></div>
                                 </div>
                            </div>
                            <div className="flex justify-end gap-4 mt-4">
                                <button onClick={handleCancel} className="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition">
                                    Cancel
                                </button>
                                <button onClick={handleSaveChanges} className="px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition">
                                    Save & Retrain
                                </button>
                            </div>
                        </div>
                    )}
                </div>

                {/* Right Column: Key Insights */}
                <div className="bg-white p-8 rounded-2xl shadow-lg">
                    <h2 className="text-xl font-bold text-gray-800 mb-4">Key Insights</h2>
                    <div className="space-y-4">
                        <div>
                            <h3 className="font-semibold text-gray-700">Risk Profile</h3>
                            <p className="text-gray-600">{riskProfile} - {portfolio.description}</p>
                        </div>
                        <div>
                            <h3 className="font-semibold text-gray-700">Primary Goal</h3>
                            <p className="text-gray-600 capitalize">{profile.goal}</p>
                        </div>
                         <div>
                            <h3 className="font-semibold text-gray-700">Next Steps</h3>
                            <ul className="list-disc list-inside text-gray-600 space-y-1 mt-1">
                                <li>Open a brokerage account.</li>
                                <li>Invest in low-cost index funds.</li>
                                <li>Set up automatic monthly contributions.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

/**
 * AI Chatbot Component
 * Allows users to ask financial questions.
 */
const AIChatbot = ({ profile }) => {
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const messagesEndRef = useRef(null);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(scrollToBottom, [messages]);
    
    useEffect(() => {
        if(isOpen) {
            setMessages([
                { sender: 'bot', text: "Hello! I'm your AI financial advisor. How can I help you today? Feel free to ask about investment strategies, savings tips, or market trends." }
            ]);
        }
    }, [isOpen]);


    const handleSendMessage = async (e) => {
        e.preventDefault();
        if (!input.trim()) return;

        const userMessage = { sender: 'user', text: input };
        setMessages(prev => [...prev, userMessage]);
        setInput('');
        setIsLoading(true);

        // --- Gemini API Call ---
        const systemPrompt = `You are a helpful and friendly AI financial advisor. Your goal is to provide clear, educational, and general financial advice. Do not provide specific, personalized investment recommendations (e.g., "buy this stock"). Instead, explain concepts, compare options, and suggest best practices. Ground your answers in real-time financial information when relevant. The user's profile is as follows: Age: ${profile.age}, Income: ${profile.income}, Savings: ${profile.savings}, Goal: ${profile.goal}. Use this context to make your explanations more relevant, but do not repeat it back to the user unless asked.`;
        const userQuery = input;
        
        const apiKey = ""; // Canvas will provide the key
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

        const payload = {
            contents: [{ parts: [{ text: userQuery }] }],
            tools: [{ "google_search": {} }],
            systemInstruction: {
                parts: [{ text: systemPrompt }]
            },
        };

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }

            const result = await response.json();
            const botResponse = result.candidates?.[0]?.content?.parts?.[0]?.text;

            if (botResponse) {
                setMessages(prev => [...prev, { sender: 'bot', text: botResponse }]);
            } else {
                setMessages(prev => [...prev, { sender: 'bot', text: "I'm sorry, I couldn't process that. Could you please rephrase?" }]);
            }
        } catch (error) {
            console.error("Error fetching from Gemini API:", error);
            setMessages(prev => [...prev, { sender: 'bot', text: "Sorry, I'm having trouble connecting right now. Please try again later." }]);
        } finally {
            setIsLoading(false);
        }
    };
    

    return (
        <>
            {/* Chat bubble button */}
            <div className="fixed bottom-6 right-6">
                <button onClick={() => setIsOpen(!isOpen)} className="bg-blue-600 text-white p-4 rounded-full shadow-lg hover:bg-blue-700 transition-transform transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
                    <BotIcon />
                </button>
            </div>
            
            {/* Chat Modal */}
            {isOpen && (
                <div className="fixed bottom-20 right-6 w-[90vw] max-w-md h-[70vh] max-h-[600px] bg-white rounded-2xl shadow-2xl flex flex-col transition-all duration-300 origin-bottom-right transform scale-100 opacity-100">
                    {/* Header */}
                    <div className="p-4 bg-blue-600 text-white rounded-t-2xl flex justify-between items-center">
                        <h3 className="font-bold text-lg">AI Financial Advisor</h3>
                        <button onClick={() => setIsOpen(false)} className="text-white hover:opacity-75">&times;</button>
                    </div>

                    {/* Messages */}
                    <div className="flex-1 p-4 overflow-y-auto bg-gray-50">
                        <div className="space-y-4">
                            {messages.map((msg, index) => (
                                <div key={index} className={`flex items-start gap-3 ${msg.sender === 'user' ? 'justify-end' : ''}`}>
                                    {msg.sender === 'bot' && <div className="flex-shrink-0 bg-gray-200 p-2 rounded-full"><BotIcon /></div>}
                                    <div className={`max-w-xs md:max-w-sm px-4 py-2 rounded-2xl ${msg.sender === 'user' ? 'bg-blue-500 text-white rounded-br-none' : 'bg-gray-200 text-gray-800 rounded-bl-none'}`}>
                                        <p className="text-sm" dangerouslySetInnerHTML={{__html: msg.text.replace(/\n/g, '<br />')}}></p>
                                    </div>
                                    {msg.sender === 'user' && <div className="flex-shrink-0 bg-blue-500 text-white p-2 rounded-full"><UserIcon /></div>}
                                </div>
                            ))}
                            <div ref={messagesEndRef} />
                        </div>
                    </div>
                    
                    {/* Input */}
                    <div className="p-4 border-t border-gray-200">
                        <form onSubmit={handleSendMessage} className="flex items-center gap-2">
                            <input
                                type="text"
                                value={input}
                                onChange={(e) => setInput(e.target.value)}
                                placeholder="Ask a financial question..."
                                className="w-full px-4 py-2 bg-gray-100 border border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                                disabled={isLoading}
                            />
                            <button type="submit" className="bg-blue-600 text-white p-3 rounded-full hover:bg-blue-700 disabled:bg-blue-300 transition-all flex-shrink-0" disabled={isLoading}>
                                {isLoading ? <LoadingSpinner /> : <SendIcon />}
                            </button>
                        </form>
                    </div>
                </div>
            )}
        </>
    );
};


/**
 * Main App Component
 * Manages the overall state and renders components.
 */
export default function App() {
    const [userProfile, setUserProfile] = useState(null);

    const handleOnboardingComplete = (profileData) => {
        setUserProfile(profileData);
    };

    const handleReset = () => {
        setUserProfile(null);
    };

    return (
        <div className="bg-gray-50 min-h-screen font-sans text-gray-900">
            <header className="bg-white shadow-sm">
                <nav className="max-w-5xl mx-auto px-6 py-4 flex items-center">
                    <svg className="h-8 w-8 text-blue-600 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                    </svg>
                    <h1 className="text-xl font-bold text-gray-800">AI Financial Advisor</h1>
                </nav>
            </header>
            <main>
                {userProfile ? (
                    <>
                        <Dashboard profile={userProfile} onReset={handleReset} />
                        <AIChatbot profile={userProfile} />
                    </>
                ) : (
                    <Onboarding onComplete={handleOnboardingComplete} />
                )}
            </main>
        </div>
    );
}